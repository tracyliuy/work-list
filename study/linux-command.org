
* Linux top命令界面

** 第一行:
   显示的内容和uptime命令一样，【l】可以显示和隐藏这个区域：

top界面第一行|uptime

top：   这个没有什么意思，只是个名称而以

01：47：56 ：     系统当前时间

up 1:26   ：   系统开机到现在经过了多少时间

2 users  ：            当前2用户在线

load average:0.00,0.00,0.00：        系统1分钟、5分钟、15分钟的CPU负载信息

** 第二行：

top界面第二行

Tasks：英文意思是工作;任务;差事。

38 total：很好理解，就是当前有38个任务，也就是38个进程。

1 running：1个进程正在运行

37 sleeping：37个进程睡眠

0 stopped：停止的进程数

0 zombie：僵死的进程数

Cpu(s)：表示这一行显示CPU总体信息

0.0%us：用户态进程占用CPU时间百分比，不包含renice值为负的任务占用的CPU的时间。

0.7%sy：内核占用CPU时间百分比

0.0%ni：renice值为负的任务的用户态进程的CPU时间百分比。nice是优先级的意思

99.3%id：空闲CPU时间百分比

0.0%wa：等待I/O的CPU时间百分比

0.0%hi：CPU硬中断时间百分比

0.0%si：CPU软中断时间百分比

0.0%st：我不知道

** 第三行：

TOP界面第三行
Men：内存的意思

256412k total：物理内存总量

30156k used：使用的物理内存量

226256 free：空闲的物理内存量

8176k buffers：用作内核缓存的物理内存量

Swap：交换空间

337356k total：交换区总量

0k used：使用的交换区量

337356k free：空闲的交换区量

12160k cached：缓冲交换区总量

** 第四行：

top界面第四行
PID：进程的ID

USER：进程所有者

PR：进程的优先级别，越小越优先被执行

NInice：值

VIRT：进程占用的虚拟内存

RES：进程占用的物理内存

SHR：进程使用的共享内存

S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数

%CPU：进程占用CPU的使用率

%MEM：进程使用的物理内存和总内存的百分比

TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。

COMMAND：进程启动命令名称

** Linux top命令操作指令

下面我列出一些常用的linux top命令操作指令：

q：退出top命令

<Space>：立即刷新

s：设置刷新时间间隔

c：显示命令完全模式

t:：显示或隐藏进程和CPU状态信息

m：显示或隐藏内存状态信息

l：显示或隐藏uptime信息

f：增加或减少进程显示标志

S：累计模式，会把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+

P：按%CPU使用率排行

T：按MITE+排行

M：按%MEM排行

u：指定显示用户进程

r：修改进程renice值

kkill：进程

i：只显示正在运行的进程

W：保存对top的设置到文件~/.toprc，下次启动将自动调用toprc文件的设置。

h：帮助命令。




* jstat

** 各个参数的意义。 

    jstat -class pid:显示加载class的数量，及所占空间等信息。 
    jstat -compiler pid:显示VM实时编译的数量等信息。 
    jstat -gc pid:可以显示gc的信息，查看gc的次数，及时间。其中最后五项，分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间。 
    jstat -gccapacity:可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小，如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，PGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。其他的可以根据这个类推， OC是old内纯的占用量。 
    jstat -gcnew pid:new对象的信息。 
    jstat -gcnewcapacity pid:new对象的信息及其占用量。 
    jstat -gcold pid:old对象的信息。 
    jstat -gcoldcapacity pid:old对象的信息及其占用量。 
    jstat -gcpermcapacity pid: perm对象的信息及其占用量。 
    jstat -util pid:统计gc信息统计。 
    jstat -printcompilation pid:当前VM执行的信息。 
    除了以上一个参数外，还可以同时加上 两个数字，如：jstat -printcompilation 3024 250 6是每250毫秒打印一次，一共打印6次，还可以加上-h3每三行显示一下标题。
** 语法结构：   
Usage: jstat -help|-options   
       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]   
** 参数解释：   
Options — 选项，我们一般使用 -gcutil 查看gc情况比较多   
vmid    — VM的进程号，即当前运行的java进程号   
interval– 间隔时间，单位为秒或者毫秒   
count   — 打印次数，如果缺省则打印无数次   
S0  — Heap上的 Survivor space 0 区已使用空间的百分比 
S1  — Heap上的 Survivor space 1 区已使用空间的百分比 
E   — Heap上的 Eden space 区已使用空间的百分比 
O   — Heap上的 Old space 区已使用空间的百分比 
P   — Perm space 区已使用空间的百分比 
YGC — 从应用程序启动到采样时发生 Young GC 的次数 
YGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒) 
FGC — 从应用程序启动到采样时发生 Full GC 的次数 
FGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒) 
GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)


* jmap -histo pid
** 参数说明
1)、options： 
executable Java executable from which the core dump was produced.
(可能是产生core dump的java可执行程序)
core 将被打印信息的core dump文件
remote-hostname-or-IP 远程debug服务的主机名或ip
server-id 唯一id,假如一台主机上多个远程debug服务 
2）、基本参数：
-dump:[live,]format=b,file=<filename> 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件. 
-finalizerinfo 打印正等候回收的对象的信息.
-heap 打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况.
-histo[:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. 
-permstat 打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来. 
-F 强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效. 
-h | -help 打印辅助信息 
-J 传递参数给jmap启动的jvm. 
pid 需要被打印配相信息的java进程id,创业与打工的区别 - 博文预览,可以用jps查问.


* jstack 
  jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息
** 参数说明
1)、options： 
executable Java executable from which the core dump was produced.
(可能是产生core dump的java可执行程序)
core 将被打印信息的core dump文件
remote-hostname-or-IP 远程debug服务的主机名或ip
server-id 唯一id,假如一台主机上多个远程debug服务 
2）、基本参数：
-F当’jstack [-l] pid’没有相应的时候强制打印栈信息
-l长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表.
-m打印java和native c/c++框架的所有栈信息.
-h | -help打印帮助信息
pid 需要被打印配置信息的java进程id,可以用jps查询.
